const express = require("express");
const multer = require("multer");
const fs = require("fs");
const path = require("path");
const cloudinary = require("cloudinary").v2;
const {
  Chapter,
  ChapterImage,
  Story,
  Category,
  Comment,
} = require("../models/setup.model");
const router = express.Router();
const IP = require("../utils/config");
const PORT = process.env.PORT || 3232;

// C·∫•u h√¨nh Cloudinary
cloudinary.config({
  cloud_name: "dftxlzy81",
  api_key: "741613966722548",
  api_secret: "Wdw-Kuna92IBGb9w6WDIcNYhy_I",
});

// C·∫•u h√¨nh Multer ƒë·ªÉ l∆∞u tr·ªØ ·∫£nh
const CHAPTER_IMAGES_DIR = path.join(__dirname, "../public/chapter_images");

const ensureDirectoryExists = (directory) => {
  if (!fs.existsSync(directory)) {
    fs.mkdirSync(directory, { recursive: true });
  }
};

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    ensureDirectoryExists(CHAPTER_IMAGES_DIR); // lu√¥n l∆∞u v√†o th∆∞ m·ª•c g·ªëc
    cb(null, CHAPTER_IMAGES_DIR);
  },
  filename: (req, file, cb) => {
    const now = new Date();
    const timestamp = now
      .toISOString()
      .replace(/[-T:\.Z]/g, "") // b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá
      .slice(0, 14); // YYYYMMDDHHMMSS
    const uniqueName = `${timestamp}-${file.originalname}`;
    cb(null, uniqueName);
  },
});

const upload = multer({ storage });

// H√†m t·∫°o ƒë∆∞·ªùng d·∫´n URL cho ·∫£nh
const createImageUrl = (filename) => {
  return `http://${IP}:${PORT}/public/chapter_images/${filename}`;
};

// Route t·∫°o chapter m·ªõi
router.post("/chapters", upload.array("images", 20), async (req, res) => {
  try {
    const { story_id, chapter_number, title, release_date, views, chapter_id } =
      req.body;

    const newChapter = await Chapter.create({
      id: chapter_id,
      story_id,
      chapter_number,
      title,
      release_date,
      views: views || 0,
    });

    const imageRecords = req.files.map((file, index) => ({
      id: `${Date.now().toString().slice(-6)}${index}`,
      chapter_id: chapter_id,
      image_url: createImageUrl(file.filename), // CH·ªà truy·ªÅn t√™n file
      order: index + 1,
      description: "",
    }));

    if (imageRecords.length > 0) {
      await ChapterImage.bulkCreate(imageRecords);
    }

    res.status(201).json({
      message: "Chapter v√† ·∫£nh ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
      chapter: newChapter,
      images: imageRecords,
    });
  } catch (error) {
    console.error("L·ªói khi t·∫°o chapter:", error);
    res.status(500).json({
      message: "L·ªói khi t·∫°o chapter",
      error: error.message,
    });
  }
});

// Route c·∫≠p nh·∫≠t chapter
router.put("/chapters/:id", upload.array("images", 20), async (req, res) => {
  try {
    const { id } = req.params;
    const { title, chapter_number, release_date, views } = req.body;

    const chapter = await Chapter.findByPk(id);
    if (!chapter) {
      return res.status(404).json({ message: "Chapter kh√¥ng t·ªìn t·∫°i" });
    }

    chapter.title = title ?? chapter.title;
    chapter.chapter_number = chapter_number ?? chapter.chapter_number;
    chapter.release_date = release_date ?? chapter.release_date;
    chapter.views = views ?? chapter.views;
    await chapter.save();
    console.log("req.files", req.files);

    const imageRecords = req.files.map((file, index) => ({
      id: `${Date.now().toString().slice(-6)}${index}`,
      chapter_id: id,
      image_url: createImageUrl(file.filename),
      order: index + 1,
      description: "",
    }));
    console.log("imageRecords", imageRecords);

    if (imageRecords.length > 0) {
      await ChapterImage.bulkCreate(imageRecords);
    }

    res.status(200).json({
      message: "‚úÖ Chapter ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!",
      chapter,
      images: imageRecords,
    });
  } catch (error) {
    console.error("‚ùå Chapter update error:", error);
    res.status(500).json({
      message: "‚ùå L·ªói khi c·∫≠p nh·∫≠t chapter",
      error: error.message,
    });
  }
});

router.delete("/chapters/comments/:commentId", async (req, res) => {
  const { commentId } = req.params;

  try {
    const deleted = await Comment.destroy({
      where: { id: commentId }, // ‚úÖ C·∫ßn c√≥ `where`
    });

    if (deleted === 0) {
      return res.status(404).json({
        message: "Comment kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a",
      });
    }

    res.json({ message: "üóëÔ∏è ƒê√£ x√≥a comment th√†nh c√¥ng!" });
  } catch (err) {
    console.error("L·ªói khi x√≥a comment:", err);
    res
      .status(500)
      .json({ message: "‚ùå L·ªói khi x√≥a comment", error: err.message });
  }
});

router.get("/chapters/:id/images", async (req, res) => {
  try {
    const images = await ChapterImage.findAll({
      where: { chapter_id: req.params.id },
    });
    res.status(200).json(images);
  } catch (error) {
    res
      .status(500)
      .json({ message: "L·ªói khi l·∫•y ·∫£nh chapter", error: error.message });
  }
});

router.get("/stories/:id", async (req, res) => {
  try {
    const story = await Story.findByPk(req.params.id, {
      include: { model: Category, as: "category" },
    });

    if (!story) {
      return res.status(404).json({ message: "Truy·ªán kh√¥ng t·ªìn t·∫°i" });
    }

    res.status(200).json(story);
  } catch (error) {
    res
      .status(500)
      .json({ message: "L·ªói khi l·∫•y d·ªØ li·ªáu truy·ªán", error: error.message });
  }
});

router.get("/chapters/:id/detail", async (req, res) => {
  const { id } = req.params;

  try {
    // L·∫•y th√¥ng tin ch∆∞∆°ng
    const chapter = await Chapter.findByPk(id);
    if (!chapter) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng" });
    }

    // L·∫•y danh s√°ch ·∫£nh ch∆∞∆°ng
    const images = await ChapterImage.findAll({
      where: { chapter_id: id },
      order: [["order", "ASC"]],
    });

    // L·∫•y danh s√°ch comment
    const comments = await Comment.findAll({
      where: { chapterId: id },
      order: [["createdAt", "DESC"]],
    });

    res.json({
      success: true,
      chapter,
      images,
      comments,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y chi ti·∫øt ch∆∞∆°ng:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y chi ti·∫øt ch∆∞∆°ng",
      error: error.message,
    });
  }
});

// POST: /api/common/chapter/:chapterId/comment
router.post("/common/chapter/:chapterId/comment", async (req, res) => {
  try {
    const { chapterId } = req.params;
    const { content, userId } = req.body;

    if (!content || !userId) {
      return res.status(400).json({ message: "Thi·∫øu n·ªôi dung ho·∫∑c userId" });
    }

    // T·∫°o comment m·ªõi
    const newComment = await Comment.create({
      content,
      userId,
      chapterId,
    });

    // Tr·∫£ v·ªÅ danh s√°ch comment m·ªõi nh·∫•t n·∫øu c·∫ßn
    const comments = await Comment.findAll({
      where: { chapterId },
      order: [["createdAt", "DESC"]],
    });

    return res.status(201).json({
      message: "ƒê√£ b√¨nh lu·∫≠n th√†nh c√¥ng",
      comments,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi g·ª≠i comment:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

module.exports = router;
