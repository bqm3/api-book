const {
  Category,
  Story,
  Chapter,
  ChapterImage,
  Tag,
  StoryTag,
} = require("../models/setup.model");

exports.getAllStories = async (req, res) => {
  try {
    const stories = await Story.findAll({
      include: [
        { model: Category, as: "category" },
        {
          model: Chapter,
          as: "chapters",
          include: [{ model: ChapterImage, as: "chapterImages" }],
        },
        { model: Tag, as: "tags" },
      ],
      // order: [["created_at", "DESC"]],
    });

    res.json({ success: true, data: stories });
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch Stories:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
  }
};

exports.getAllCategory = async (req, res) => {
  try {
    const data = await Category.findAll({
      // include: [{ model: Story }],
      // order: [["name", "ASC"]],
    });

    res.json({ success: true, data: data });
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch Category:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
  }
};

// üü¢ L·∫•y danh s√°ch Stories theo ID Category
exports.getStoriesByCategory = async (req, res) => {
  try {
    const { categoryId } = req.params;

    const stories = await Story.findAll({
      where: { genre_id: categoryId },
      include: [
        { model: Category, as: "category" }, // ƒê·∫£m b·∫£o "as" ƒë√∫ng v·ªõi model setup
        {
          model: Chapter,
          as: "chapters",
          include: [{ model: ChapterImage, as: "chapterImages" }],
        },
        { model: Tag, as: "tags" }, // ƒê·∫£m b·∫£o alias ƒë√∫ng v·ªõi setup
      ],
      order: [["created_at", "DESC"]],
    });

    res.json({ success: true, data: stories });
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y Stories theo Category:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
  }
};

// üü¢ L·∫•y danh s√°ch Stories theo ID Tag
exports.getStoriesByTag = async (req, res) => {
  try {
    const { tagId } = req.params;

    const stories = await Story.findAll({
      include: [
        { model: Category, as: "category" },
        {
          model: Chapter,
          as: "chapters",
          include: [{ model: ChapterImage, as: "chapterImages" }],
        },
        {
          model: Tag,
          as: "tags",
          where: { id: tagId }, // L·ªçc theo Tag ID
        },
      ],
      order: [["created_at", "DESC"]],
    });

    res.json({ success: true, data: stories });
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y Stories theo Tag:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
  }
};

exports.getChaptersByStory = async (req, res) => {
  try {
    const { storyId } = req.params;

    // üü¢ T√¨m story theo ID
    const story = await Story.findOne({
      where: { id: storyId },
      include: [
        { model: Category, as: "category" },
        { model: Tag, as: "tags" },
      ],
    });

    if (!story) {
      return res
        .status(404)
        .json({ success: false, message: "Story kh√¥ng t·ªìn t·∫°i!" });
    }

    // üü¢ L·∫•y danh s√°ch chapters c·ªßa story
    const chapters = await Chapter.findAll({
      where: { story_id: storyId },
      attributes: ["id", "chapter_number", "title", "release_date"], // üü¢ Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
      order: [["chapter_number", "ASC"]], // üü¢ S·∫Øp x·∫øp theo th·ª© t·ª± chapter
    });

    res.json({
      success: true,
      story: {
        id: story.id,
        title: story.title,
        author: story.author,
        category: story.category.name,
        tags: story.tags.map((tag) => tag.name),
      },
      chapters,
    });
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch chapters:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
  }
};

exports.getChapterDetailHTML = async (req, res) => {
  try {
    const { chapterId } = req.params;

    // üü¢ T√¨m chapter theo ID
    const chapter = await Chapter.findOne({
      where: { id: chapterId },
      include: [
        {
          model: Story,
          as: "story",
          include: [
            { model: Category, as: "category" },
            { model: Tag, as: "tags" },
          ],
        },
        {
          model: ChapterImage,
          as: "chapterImages",
          order: [["order", "ASC"]], // üü¢ S·∫Øp x·∫øp ·∫£nh theo th·ª© t·ª±
        },
      ],
    });

    if (!chapter) {
      return res
        .status(404)
        .json({ success: false, message: "Chapter kh√¥ng t·ªìn t·∫°i!" });
    }

    // üü¢ Render HTML
    let htmlContent = `
      <html>
      <head>
        <title>${chapter.story.title} - ${chapter.title}</title>
        <style>
          body { font-family: Arial, sans-serif; text-align: center; }
          h1 { color: #333; }
          img { width: 80%; max-width: 800px; }
        </style>
      </head>
      <body>
        <h1>${chapter.story.title} - ${chapter.title}</h1>
        <p><strong>Th·ªÉ lo·∫°i:</strong> ${chapter.story.category.name}</p>
        <p><strong>Tags:</strong> ${chapter.story.tags
          .map((tag) => tag.name)
          .join(", ")}</p>
        <p><strong>Ng√†y ph√°t h√†nh:</strong> ${chapter.release_date}</p>
        <hr>
    `;

    // üü¢ Th√™m ·∫£nh c·ªßa chapter v√†o HTML
    chapter.chapterImages.forEach((img) => {
      htmlContent += `<img src="${img.image_url}" alt="Page ${img.order}"><br>`;
    });

    // üü¢ Tr·∫£ v·ªÅ HTML
    res.send(htmlContent);
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y chi ti·∫øt chapter:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng" });
  }
};
